___________________________________________________进入run_training.py建立ensemble 0......(cross_validate.py)___________________________________________________
选出最优验证结果对应的epoch：Model 0 best validation auc = 0.992735 on epoch 29 --(run_training.py)
输出当前ensembl的Model 0 的test结果：auc = 0.991252 --(run_training.py)
选出最优验证结果对应的epoch：Model 1 best validation auc = 0.991866 on epoch 28 --(run_training.py)
输出当前ensembl的Model 1 的test结果：auc = 0.990694 --(run_training.py)
选出最优验证结果对应的epoch：Model 2 best validation auc = 0.992650 on epoch 29 --(run_training.py)
输出当前ensembl的Model 2 的test结果：auc = 0.991329 --(run_training.py)
选出最优验证结果对应的epoch：Model 3 best validation auc = 0.990564 on epoch 27 --(run_training.py)
输出当前ensembl的Model 3 的test结果：auc = 0.989002 --(run_training.py)
___________________________________________________进入run_training.py建立ensemble 0......(cross_validate.py)___________________________________________________
选出最优验证结果对应的epoch：Model 0 best validation auc = 0.992735 on epoch 29 --(run_training.py)
输出当前ensembl的Model 0 的test结果：auc = 0.991252 --(run_training.py)
选出最优验证结果对应的epoch：Model 1 best validation auc = 0.991866 on epoch 28 --(run_training.py)
输出当前ensembl的Model 1 的test结果：auc = 0.990694 --(run_training.py)
___________________________________________________进入run_training.py建立ensemble 0......(cross_validate.py)___________________________________________________
选出最优验证结果对应的epoch：Model 0 best validation auc = 0.992735 on epoch 29 --(run_training.py)
输出当前ensembl的Model 0 的test结果：auc = 0.991252 --(run_training.py)
选出最优验证结果对应的epoch：Model 1 best validation auc = 0.991866 on epoch 28 --(run_training.py)
输出当前ensembl的Model 1 的test结果：auc = 0.990694 --(run_training.py)
选出最优验证结果对应的epoch：Model 2 best validation auc = 0.992650 on epoch 29 --(run_training.py)
输出当前ensembl的Model 2 的test结果：auc = 0.991329 --(run_training.py)
选出最优验证结果对应的epoch：Model 3 best validation auc = 0.990564 on epoch 27 --(run_training.py)
输出当前ensembl的Model 3 的test结果：auc = 0.989002 --(run_training.py)
选出最优验证结果对应的epoch：Model 4 best validation auc = 0.990643 on epoch 29 --(run_training.py)
输出当前ensembl的Model 4 的test结果：auc = 0.989803 --(run_training.py)
输出当前Ensemble的test结果： auc = 0.991215 --(run_training.py)
___________________________________________________进入run_training.py建立ensemble 1......(cross_validate.py)___________________________________________________
选出最优验证结果对应的epoch：Model 0 best validation auc = 0.993410 on epoch 29 --(run_training.py)
输出当前ensembl的Model 0 的test结果：auc = 0.992253 --(run_training.py)
选出最优验证结果对应的epoch：Model 1 best validation auc = 0.992539 on epoch 29 --(run_training.py)
输出当前ensembl的Model 1 的test结果：auc = 0.991890 --(run_training.py)
选出最优验证结果对应的epoch：Model 2 best validation auc = 0.992591 on epoch 28 --(run_training.py)
输出当前ensembl的Model 2 的test结果：auc = 0.992227 --(run_training.py)
选出最优验证结果对应的epoch：Model 3 best validation auc = 0.994044 on epoch 29 --(run_training.py)
输出当前ensembl的Model 3 的test结果：auc = 0.992222 --(run_training.py)
选出最优验证结果对应的epoch：Model 4 best validation auc = 0.993521 on epoch 29 --(run_training.py)
输出当前ensembl的Model 4 的test结果：auc = 0.992884 --(run_training.py)
输出当前Ensemble的test结果： auc = 0.992897 --(run_training.py)
___________________________________________________进入run_training.py建立ensemble 2......(cross_validate.py)___________________________________________________
选出最优验证结果对应的epoch：Model 0 best validation auc = 0.991393 on epoch 29 --(run_training.py)
输出当前ensembl的Model 0 的test结果：auc = 0.988495 --(run_training.py)
选出最优验证结果对应的epoch：Model 1 best validation auc = 0.992483 on epoch 29 --(run_training.py)
输出当前ensembl的Model 1 的test结果：auc = 0.989437 --(run_training.py)
选出最优验证结果对应的epoch：Model 2 best validation auc = 0.991998 on epoch 29 --(run_training.py)
输出当前ensembl的Model 2 的test结果：auc = 0.987926 --(run_training.py)
选出最优验证结果对应的epoch：Model 3 best validation auc = 0.991659 on epoch 27 --(run_training.py)
输出当前ensembl的Model 3 的test结果：auc = 0.987881 --(run_training.py)
选出最优验证结果对应的epoch：Model 4 best validation auc = 0.992016 on epoch 29 --(run_training.py)
输出当前ensembl的Model 4 的test结果：auc = 0.988562 --(run_training.py)
输出当前Ensemble的test结果： auc = 0.989461 --(run_training.py)
all_scores(added by cgx)--(cross_validate.py): 
 {'auc': array([[0.99121499],
       [0.99289744],
       [0.9894609 ]])}
共3个fold cross validation--(cross_validate.py)
	Seed(实际也是fold) 0 ==> test auc = 0.991215
	Seed(实际也是fold) 1 ==> test auc = 0.992897
	Seed(实际也是fold) 2 ==> test auc = 0.989461
Overall test auc = 0.991191 +/- 0.001403
Elapsed time = 11 days, 14:36:29
